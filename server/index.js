const express = require('express');
const cors = require('cors');
const path = require('path');
const mongoose = require('mongoose');
const app = express();
const PORT = process.env.PORT || 5000;
require('dotenv').config();
const axios = require('axios');
const PDFDocument = require('pdfkit');


app.use(cors());

app.use(express.json());
mongoose.connect('mongodb+srv://komalhasija4020:komal@cluster0.uqh7o0g.mongodb.net/', {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => {
  console.log('✅ Connected to MongoDB Atlas successfully!');
})
.catch((err) => {
  console.error('❌ MongoDB connection error:', err);
});

const favoriteSchema = new mongoose.Schema({
  symbol: String,
  name: String,
  image: String,
});


const Favorite = mongoose.model("Favorite", favoriteSchema);

// Add to favorites
app.post("/api/favorites", async (req, res) => {
  const { symbol, name, image } = req.body;

  try {
    const exists = await Favorite.findOne({ symbol });
    if (exists) return res.status(200).json({ message: "Already favorited" });

    const fav = new Favorite({ symbol, name, image });
    await fav.save();
    res.status(201).json({ message: "Added to favorites" });
  } catch (err) {
    res.status(500).json({ error: "Failed to save favorite" });
  }
});

// Get all favorites
app.get("/api/favorites", async (req, res) => {
  try {
    const favorites = await Favorite.find();
    res.json(favorites);
  } catch (err) {
    res.status(500).json({ error: "Failed to fetch favorites" });
  }
});



app.get('/api/coins-report', async (req, res) => {
  try {
    const response = await fetch(
        `https://rest.coincap.io/v3/assets?apiKey=57ba7d67d68d756cb4503d0321f5a1e3bb3fbfa1dcfeb5456eacf0cec39631e6`,
        
      );
   
    const json = await response.json(); // parse JSON from fetch response
    const coins = json.data;

    const doc = new PDFDocument({ margin: 40, size: 'A4' });

    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'attachment; filename=crypto_report.pdf');

    doc.pipe(res);

    // Title
    doc.fontSize(22).fillColor('#4B0082').text(' CryptoPulse Coin Report', { align: 'center' });
    doc.moveDown(1);

    // Subtitle / date
    const now = new Date().toLocaleString();
    doc.fontSize(10).fillColor('gray').text(`Generated on: ${now}`, { align: 'center' });
    doc.moveDown(2);

    // Table header
    const tableTop = doc.y;
    const itemX = 40;
    const symbolX = 150;
    const priceX = 220;
    const marketCapX = 300;
    const changeX = 420;

    doc
      .fontSize(12)
      .fillColor('#000')
      .text('Coin', itemX, tableTop, { bold: true })
      .text('Symbol', symbolX, tableTop)
      .text('Price (USD)', priceX, tableTop)
      .text('Market Cap', marketCapX, tableTop)
      .text('24h Change', changeX, tableTop);

    doc.moveTo(40, tableTop + 15).lineTo(550, tableTop + 15).stroke();

    // Rows
    let y = tableTop + 25;

    coins.forEach((coin, index) => {
      const changePercent = parseFloat(coin.changePercent24Hr);
      const changeColor = changePercent >= 0 ? 'green' : 'red';

      doc
        .fontSize(10)
        .fillColor('black')
        .text(`${index + 1}. ${coin.name}`, itemX, y)
        .text(coin.symbol.toUpperCase(), symbolX, y)
        .text(`$${parseFloat(coin.priceUsd).toFixed(2)}`, priceX, y)
        .text(`$${parseFloat(coin.marketCapUsd).toLocaleString()}`, marketCapX, y)
        .fillColor(changeColor)
        .text(`${changePercent.toFixed(2)}%`, changeX, y);

      y += 20;

      // Add page break if close to bottom
      if (y > 750) {
        doc.addPage();
        y = 40;
      }
    });

    // Footer
    doc
      .fontSize(9)
      .fillColor('gray')
      .text('Generated by CryptoPulse • Powered by CoinCap API', 40, 780, { align: 'center', width: 500 });

    doc.end();

  } catch (error) {
    console.error('Error generating PDF:', error);
    res.status(500).json({ error: 'Failed to generate report' });
  }
});




// Serve static files
app.use(express.static(path.join(__dirname, '../client/dist')));

// app.get('*',(req,res)=>{
//   res.sendFile(path.resolve(__dirname,"client","dist","index.html"));
// })

app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));